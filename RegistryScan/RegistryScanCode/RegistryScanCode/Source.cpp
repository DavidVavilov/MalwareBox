#include <iostream>
#include <windows.h>
#include <array>
#include <vector>
#include <fstream>
#include <regex>

/// <summary>
/// This function runs the strings command by creating a pipe and reading the output of stdout
/// </summary>
/// <param name="cmd">
/// the command to run, in our case, running strings on a file chosen by the user | type: const char*
/// </param>
/// <returns>
/// returns the output of the strings command on the file | type: std::string
/// </returns>
std::string exec(const char* cmd);

/// <summary>
/// A function that gets all the registry keys from a executable file
/// </summary>
/// <param name="stringsResult">String stringsResult</param>
/// <returns>A vector of the keys (Using Regex)</returns>
std::vector<std::string> getRegistryKeysFromExecutable(std::string stringsResult);

int main(int argc, char** argv)
{
    if (argc > 0)
    {
        //std::string cmd = "strings.exe -nobanner " + std::string(argv[1]);
        std::string stringOnExecutable = "strings.exe -nobanner strings.exe";
        std::vector<std::string> registryKeys = getRegistryKeysFromExecutable(exec(stringOnExecutable.c_str()));
        std::cout << "Found " << registryKeys.size() << " Registry Keys:" << std::endl;
        for (int i = 0; i < registryKeys.size(); i++)
        {
            std::cout << registryKeys[i] << std::endl;
        }
    }
    return 0;
}

std::string exec(const char* cmd) {
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(cmd, "r"), _pclose);
    if (!pipe) {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }
    return result;
}

std::vector<std::string> getRegistryKeysFromExecutable(std::string stringsResult)
{

    std::string found;
    std::smatch match;
    std::vector<std::string> matches;
    // regex_search that searches pattern regexp in the string mystr  
    std::string::const_iterator searchStart(stringsResult.cbegin());

    while (std::regex_search(searchStart += match.position(), stringsResult.cend(), match, std::regex("(DRIVERS\\\\|HARDWARE\\\\|SAM\\\\|SECURITY\\\\|SOFTWARE\\\\|SYSTEM\\\\)([a-zA-Z \\\\*])+|(Drivers\\\\|Hardware\\\\|Sam\\\\|Security\\\\|Software\\\\|System\\\\)([a-zA-Z \\\\*])+")))
    {
        matches.push_back(match[0]);
        stringsResult = stringsResult.erase(stringsResult.find(match[0]), match[0].length() + 1);
    }
    return matches;

} 