#include <iostream>
#include <windows.h>
#include <array>
#include <vector>
#include <fstream>
#include <regex>  
#include <tchar.h>

#define MAX_KEY_LENGTH 255
#define MAX_VALUE_NAME 16383
#define SIZE    8192
#define BYTEINCREMENT 4096

/// <summary>
/// This function runs the strings command by creating a pipe and reading the output of stdout
/// </summary>
/// <param name="cmd">
/// the command to run, in our case, running strings on a file chosen by the user | type: const char*
/// </param>
/// <returns>
/// returns the output of the strings command on the file | type: std::string
/// </returns>
std::string executeStringsOnExecutable(const char* cmd);

/// <summary>
/// A function that gets all the registry keys from a executable file
/// </summary>
/// <param name="stringsResult">String stringsResult</param>
/// <returns>A vector of the keys (Using Regex)</returns>
std::vector<std::string> getRegistryKeysFromExecutable(std::string stringsResult);

/// <summary>
/// A function that checks if the key exists
/// </summary>
/// <param name="registryKey">RegistryKey string</param>
/// <returns>bool</returns>
bool checkIfRegistryKeyExists(std::string registryKey);

/// <summary>
/// A functions that adds a backslash 
/// </summary>
/// <param name="registryKey">RegistryKey string</param>
/// <returns>string</returns>
std::string doubleBackslash(std::string registryKey);

/// <summary>
/// A function that notifys when an event happens to a registry key
/// </summary>
/// <param name="registryKey"></param>
void notifyRegistryKey(std::string registryKey);

int main(int argc, char** argv)
{
    if (argc > 0)
    {
        //std::string cmd = "strings.exe -nobanner " + std::string(argv[1]);
        std::string commandLineStringsOnExecutable = "strings.exe -nobanner reg.exe";
        std::string stringsOutput = executeStringsOnExecutable(commandLineStringsOnExecutable.c_str());
        std::vector<std::string> registryKeys = getRegistryKeysFromExecutable(stringsOutput);
        std::cout << "Found " << registryKeys.size() << " Registry Keys:" << std::endl;
        for (int i = 0; i < registryKeys.size(); i++)
        {
            std::cout << registryKeys[i] << std::endl;
            if (checkIfRegistryKeyExists(registryKeys[i]))
            {
                notifyRegistryKey(doubleBackslash(registryKeys[i]));
            }
        }
    }
    return 0;
}

std::string executeStringsOnExecutable(const char* commandLineStringsOnExecutable)
{
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(commandLineStringsOnExecutable, "r"), _pclose);
    if (!pipe)
    {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr)
    {
        result += buffer.data();
    }
    return result;
}

std::vector<std::string> getRegistryKeysFromExecutable(std::string stringsResult)
{

    std::string found;
    std::smatch match;
    std::vector<std::string> matches;
    std::string::const_iterator searchStart(stringsResult.cbegin());

    while (std::regex_search(searchStart += match.position(), stringsResult.cend(), match, std::regex("(DRIVERS\\\\|HARDWARE\\\\|SAM\\\\|SECURITY\\\\|SOFTWARE\\\\|SYSTEM\\\\)([a-zA-Z \\\\*])+|(Drivers\\\\|Hardware\\\\|Sam\\\\|Security\\\\|Software\\\\|System\\\\)([a-zA-Z \\\\*])+")))
    {
        matches.push_back(match[0]);
        stringsResult = stringsResult.erase(stringsResult.find(match[0]), match[0].length() + 1);
    }
    return matches;

} 

bool checkIfRegistryKeyExists(std::string registryKey)
{
    HKEY key = nullptr;
    if (RegOpenKeyExA(HKEY_CURRENT_USER, doubleBackslash(registryKey).c_str(), 0, KEY_READ, &key) == ERROR_SUCCESS)
    {
        RegCloseKey(key);
        return true;
    }
    return false;
}

std::string doubleBackslash(std::string registryKey)
{
    for (int i = 0; i < registryKey.size(); i++)
    {
        if (registryKey[i] == '\\')
        {
            registryKey.insert(i, "\\");
            i++;
        }
    }
    return registryKey;
}

void notifyRegistryKey(std::string registryKey)
{
    HANDLE hEvent;
    HKEY   hKey;
    LONG   lErrorCode;
    char lpData[1024] = { 0 };
    DWORD cType;
    DWORD buffersize = sizeof(lpData);
    DWORD  dwFilter = REG_NOTIFY_CHANGE_NAME | REG_NOTIFY_CHANGE_ATTRIBUTES | REG_NOTIFY_CHANGE_LAST_SET | REG_NOTIFY_CHANGE_SECURITY;

    lErrorCode = RegOpenKeyExA(HKEY_CURRENT_USER, doubleBackslash(registryKey).c_str(), 0, KEY_NOTIFY, &hKey);
    if (lErrorCode != ERROR_SUCCESS)
    {
        std::cout << "Error - " << lErrorCode;
        return;
    }

    hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
    if (hEvent == NULL)
    {
        std::cout << "Error - " << GetLastError();
        return;
    }

    lErrorCode = RegNotifyChangeKeyValue(hKey, TRUE, dwFilter, hEvent, TRUE);
    if (lErrorCode != ERROR_SUCCESS)
    {
        std::cout << "Error - " << lErrorCode;
        return;
    }

    if (WaitForSingleObject(hEvent, INFINITE) == WAIT_FAILED)
    {
        std::cout << "Error - " << GetLastError();
        return;
    }
    else {
        std::cout << "Event in - " << registryKey << std::endl;
        RegQueryValueEx(hKey, NULL, NULL, &cType, (LPBYTE)lpData, &buffersize);
        std::cout << "Registry Key Open: mem key location=" << hKey << std::endl;
    }

    // Close the key.
    lErrorCode = RegCloseKey(hKey);
    if (lErrorCode != ERROR_SUCCESS)
    {
        std::cout << "Error - " << GetLastError();
        return;
    }

    // Close the handle.
    if (!CloseHandle(hEvent))
    {
        std::cout << "Error - " << GetLastError();
        return;
    }
}