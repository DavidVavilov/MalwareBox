#include <array>
#include <regex>
#include <fstream>

/// <summary>
/// this function runs the strings command by creating a pipe and reading the output of stdout
/// </summary>
/// <param name="cmd">
/// the command to run, in our case, running strings on a file chosen by the user | type: const char*
/// </param>
/// <returns>
/// returns the output of the strings command on the file | type: std::string
/// </returns>
std::string exec(const char* cmd);

/// <summary>
/// regex the strings of the file to sort them by IP, dll, website and misc
/// </summary>
/// <param name="stringToSort">
/// the strings from the file to sort | type: std::string
/// </param>
/// <returns>
/// sorted string | type: std::string
/// </returns>
std::string SortString(std::string stringToSort);

/// <summary>
/// regex the strings found in file
/// </summary>
/// <param name="stringToSort">
/// strings to sort through with regex | type: std::string&
/// </param>
/// <param name="regexp">
/// regex expression to sort with | type: std::regex
/// </param>
/// <returns>
/// strings that match the regex expression | type: std::string
/// </returns>
std::string RegexFunction(std::string& stringToSort, std::regex regexp);

/// <summary>
/// writes a txt log for the string scan
/// </summary>
/// <param name="logString">
/// string containing the strings found in the file after being sorted with regex | type: const std::string& 
/// </param>
void WriteLogToFile(const std::string& logString);

int main(int argc, char* argv[])
{
    if (argc > 1)
    {
        std::string cmd = "strings -nobanner " + std::string(argv[1]);
        WriteLogToFile(SortString(exec(cmd.c_str())));
    }
    return 0;
}

std::string exec(const char* cmd) {
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(cmd, "r"), _pclose);
    if (!pipe) {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }
    return result;
}

std::string SortString(std::string stringToSort)
{
    //std::string combined = "StringsScan:\n";
    std::string dlls = "dlls:\n" + RegexFunction(stringToSort, std::regex("^.*\.(dll|DLL)$"));
    std::string IP = "IPs:\n"+ RegexFunction(stringToSort, std::regex("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"));
    std::string webSite = "websites:\n"+ RegexFunction(stringToSort, std::regex("^https?://[^/\n]+(/[^\\/%\n]+)*(/?\?[^&\n]+(&[^&\n]+)*)?/?$"));
    
    return "StringsScan:\n" + dlls + IP + webSite + "Misc:\n" + stringToSort;
}

std::string RegexFunction(std::string& stringToSort, std::regex regexp)
{
    std::string found;
    // flag type for determining the matching behavior (in this case on string objects)
    std::smatch matchDLL;
    // regex_search that searches pattern regexp in the string mystr  
    std::string::const_iterator searchStart(stringToSort.cbegin());

    while (std::regex_search(searchStart += matchDLL.position(), stringToSort.cend(), matchDLL, regexp))
    {
        found += matchDLL[0];
        found += "\n";
        stringToSort = stringToSort.erase(stringToSort.find(matchDLL[0]), matchDLL[0].length() + 1);
    }
    return found;
}

void WriteLogToFile(const std::string& logString)
{
    std::ofstream out("StringsScanLog.txt");
    out << logString;
    out.close();
}
