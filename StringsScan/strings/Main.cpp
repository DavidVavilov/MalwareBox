#include <iostream>
#include <string>
#include <array>
#include <regex>
#include <vector>


/// <summary>
/// this function runs the strings command by creating a pipe and reading the output of stdout
/// </summary>
/// <param name="cmd">
/// the command to run, in our case, running strings on a file chosen by the user | type: const char*
/// </param>
/// <returns>
/// returns the output of the strings command on the file | type: std::string
/// </returns>
std::string exec(const char* cmd);

/// <summary>
/// splits the string with delimiter "\n"
/// </summary>
/// <param name="string">
/// string to split | type: const std::string&
/// </param>
/// <returns>
/// vector with all strings returned | type: std::vector<std::string>
/// </returns>
std::vector<std::string> splitString(const std::string& string);

/// <summary>
/// regex the strings of the file to sort them by IP, dll, website and misc
/// </summary>
/// <param name="stringToSort">
/// the strings from the file to sort | type: std::string
/// </param>
/// <returns>
/// sorted string | type: std::string
/// </returns>
std::string RegexAndSort(std::string stringToSort);

int main(void)
{
    std::string outPut = "";
    //std::vector<std::string> stringsVector;
    std::string dllsTest = "";

    std::string fileName;
    std::cout << "Input file name: " << std::endl;
    std::getline(std::cin, fileName);
    std::string cmd = "strings -nobanner " + fileName;
    outPut.append(exec(cmd.c_str()));
    //std::cout << outPut << std::endl;
    
    dllsTest = RegexAndSort(outPut);
    std::cout << dllsTest << std::endl;
    //stringsVector = splitString(outPut);

    //std::cout << "looping vector:" << std::endl;
    //for (auto itr = stringsVector.begin(); itr != stringsVector.end(); itr++)
    //{
    //    std::cout << *itr << std::endl;
    //}


    return 0;
}

std::string exec(const char* cmd) {
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(cmd, "r"), _pclose);
    if (!pipe) {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }
    return result;
}

std::vector<std::string> splitString(const std::string& string)
{
    std::string delimiter = "\n";
    std::vector<std::string> returnVector;

    size_t currectPos = 0;
    size_t lastPos = 0;
    std::string token;
    while ((currectPos = string.find(delimiter, lastPos)) != std::string::npos) {
        token = string.substr(lastPos, currectPos- lastPos);
        returnVector.push_back(token);
        lastPos = currectPos + delimiter.size();
    }
    return returnVector;
}

std::string RegexAndSort(std::string stringToSort)
{
    std::string combined = "StringsScan:\n";
    std::string dlls = "dlls:\n";
    std::string IP = "IPs:\n";
    std::string webSite = "websites:\n";

    // regex expression for pattern to be searched 
    std::regex regexpDLL("[a-zA-Z]+.dll|[a-zA-Z]+.DLL");
    // flag type for determining the matching behavior (in this case on string objects)
    std::smatch m;
    // regex_search that searches pattern regexp in the string mystr  
    std::string::const_iterator searchStart(stringToSort.cbegin());

    while (std::regex_search(searchStart += m.position(), stringToSort.cend(), m, regexpDLL))
    {
        dlls += m[0];
        dlls += "\n";
        stringToSort = stringToSort.erase(stringToSort.find(m[0]), m[0].length()+1);
    }
    combined += dlls;

    std::regex regexpIP("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])");

    searchStart = stringToSort.cbegin();
    while (std::regex_search(searchStart += m.position(), stringToSort.cend(), m, regexpIP))
    {
        IP += m[0];
        IP += "\n";
        stringToSort = stringToSort.erase(stringToSort.find(m[0]), m[0].length() + 1);
    }
    combined += IP;

    std::regex regexpWebsite("^https?://[^/\n]+(/[^\\/%\n]+)*(/?\?[^&\n]+(&[^&\n]+)*)?/?$");

    searchStart = stringToSort.cbegin();
    while (std::regex_search(searchStart += m.position(), stringToSort.cend(), m, regexpWebsite))
    {
        webSite += m[0];
        webSite += "\n";
        stringToSort = stringToSort.erase(stringToSort.find(m[0]), m[0].length() + 1);
    }
    combined += webSite;
    combined += "Misc:\n" + stringToSort;
    return combined;
}
