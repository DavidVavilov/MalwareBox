#include <iostream>
#include <string>
#include <array>
#include <regex>
#include <vector>


/// <summary>
/// this function runs the strings command by creating a pipe and reading the output of stdout
/// </summary>
/// <param name="cmd">
/// the command to run, in our case, running strings on a file chosen by the user | type: const char*
/// </param>
/// <returns>
/// returns the output of the strings command on the file | type: std::string
/// </returns>
std::string exec(const char* cmd);

/// <summary>
/// regex the strings of the file to sort them by IP, dll, website and misc
/// </summary>
/// <param name="stringToSort">
/// the strings from the file to sort | type: std::string
/// </param>
/// <returns>
/// sorted string | type: std::string
/// </returns>
std::string RegexAndSort(std::string stringToSort);

int main(void)
{
    std::string outPut = "";
    std::string dllsTest = "";

    std::string fileName;
    std::cout << "Input file name: " << std::endl;
    std::getline(std::cin, fileName);
    std::string cmd = "strings -nobanner " + fileName;
    outPut.append(exec(cmd.c_str()));
    
    dllsTest = RegexAndSort(outPut);
    std::cout << dllsTest << std::endl;


    return 0;
}

std::string exec(const char* cmd) {
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(cmd, "r"), _pclose);
    if (!pipe) {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }
    return result;
}

std::string RegexAndSort(std::string stringToSort)
{
    std::string combined = "StringsScan:\n";
    std::string dlls = "dlls:\n";
    std::string IP = "IPs:\n";
    std::string webSite = "websites:\n";

    // regex expression for pattern to be searched 
    std::regex regexpDLL("^.*\.(dll|DLL)$");
    // flag type for determining the matching behavior (in this case on string objects)
    std::smatch matchDLL;
    // regex_search that searches pattern regexp in the string mystr  
    std::string::const_iterator searchStart(stringToSort.cbegin());

    while (std::regex_search(searchStart += matchDLL.position(), stringToSort.cend(), matchDLL, regexpDLL))
    {
        dlls += matchDLL[0];
        dlls += "\n";
        stringToSort = stringToSort.erase(stringToSort.find(matchDLL[0]), matchDLL[0].length()+1);
    }
    combined += dlls;

    std::smatch matchIP;
    std::regex regexpIP("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$");

    searchStart = stringToSort.cbegin();
    while (std::regex_search(searchStart += matchIP.position(), stringToSort.cend(), matchIP, regexpIP))
    {
        IP += matchIP[0];
        IP += "\n";
        stringToSort = stringToSort.erase(stringToSort.find(matchIP[0]), matchIP[0].length() + 1);
    }
    combined += IP;

    std::smatch matchWebsite;
    std::regex regexpWebsite("^https?://[^/\n]+(/[^\\/%\n]+)*(/?\?[^&\n]+(&[^&\n]+)*)?/?$");

    searchStart = stringToSort.cbegin();
    while (std::regex_search(searchStart += matchWebsite.position(), stringToSort.cend(), matchWebsite, regexpWebsite))
    {
        webSite += matchWebsite[0];
        webSite += "\n";
        stringToSort = stringToSort.erase(stringToSort.find(matchWebsite[0]), matchWebsite[0].length() + 1);
    }
    combined += webSite;
    combined += "Misc:\n" + stringToSort;
    return combined;
}
