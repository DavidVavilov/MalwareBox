#include "EventSinkCreationEvent.h"

ULONG EventSinkCreationEvent::AddRef()
{
    return InterlockedIncrement(&m_lRef);
}

ULONG EventSinkCreationEvent::Release()
{
    LONG lRef = InterlockedDecrement(&m_lRef);
    if (lRef == 0)
        delete this;
    return lRef;
}

HRESULT EventSinkCreationEvent::QueryInterface(REFIID riid, void** ppv)
{
    if (riid == IID_IUnknown || riid == IID_IWbemObjectSink)
    {
        *ppv = (IWbemObjectSink*)this;
        AddRef();
        return WBEM_S_NO_ERROR;
    }
    else return E_NOINTERFACE;
}


HRESULT EventSinkCreationEvent::Indicate(long lObjectCount,
    IWbemClassObject** apObjArray)
{
    HRESULT hr = S_OK;
    _variant_t vtProp;

    for (int i = 0; i < lObjectCount; i++)
    {

        hr = apObjArray[i]->Get(_bstr_t(L"TargetInstance"), 0, &vtProp, 0, 0);
        if (!FAILED(hr))
        {
            IUnknown* str = vtProp;
            hr = str->QueryInterface(IID_IWbemClassObject, reinterpret_cast<void**>(&apObjArray[i]));
            if (SUCCEEDED(hr))
            {
                _variant_t cn;
                hr = apObjArray[i]->Get(L"Caption", 0, &cn, NULL, NULL);
                if (SUCCEEDED(hr))
                {
                    if ((cn.vt == VT_NULL) || (cn.vt == VT_EMPTY))
                        wcout << "Caption : " << ((cn.vt == VT_NULL) ? "NULL" : "EMPTY") << endl;
                    else
                        if ((cn.vt & VT_ARRAY))
                            wcout << "Caption : " << "Array types not supported (yet)" << endl;
                        else
                            wcout << "Caption : " << cn.bstrVal << endl;
                }
                VariantClear(&cn);

                hr = apObjArray[i]->Get(L"CommandLine", 0, &cn, NULL, NULL);
                if (SUCCEEDED(hr))
                {
                    if ((cn.vt == VT_NULL) || (cn.vt == VT_EMPTY))
                        wcout << "CommandLine : " << ((cn.vt == VT_NULL) ? "NULL" : "EMPTY") << endl;
                    else
                        if ((cn.vt & VT_ARRAY))
                            wcout << "CommandLine : " << "Array types not supported (yet)" << endl;
                        else
                            wcout << "CommandLine : " << cn.bstrVal << endl;
                }
                VariantClear(&cn);

                /*hr = apObjArray[i]->Get(L"Handle", 0, &cn, NULL, NULL);
                if (SUCCEEDED(hr))
                {
                    if ((cn.vt == VT_NULL) || (cn.vt == VT_EMPTY))
                        wcout << "Handle : " << ((cn.vt == VT_NULL) ? "NULL" : "EMPTY") << endl;
                    else
                        if ((cn.vt & VT_ARRAY))
                            wcout << "Handle : " << "Array types not supported (yet)" << endl;
                        else
                            wcout << "Handle : " << cn.bstrVal << endl;
                }
                VariantClear(&cn);*/

                hr = apObjArray[i]->Get(L"ParentProcessId", 0, &cn, NULL, NULL);
                if (SUCCEEDED(hr))
                {
                    if ((cn.vt == VT_NULL) || (cn.vt == VT_EMPTY))
                        wcout << "ParentProcessId : " << ((cn.vt == VT_NULL) ? "NULL" : "EMPTY") << endl;
                    else
                        if ((cn.vt & VT_ARRAY))
                            wcout << "ParentProcessId : " << "Array types not supported (yet)" << endl;
                        else
                            wcout << "ParentProcessId : " << cn.intVal << endl;
                }

                hr = apObjArray[i]->Get(L"ProcessId", 0, &cn, NULL, NULL);
                if (SUCCEEDED(hr))
                {
                    if ((cn.vt == VT_NULL) || (cn.vt == VT_EMPTY))
                        wcout << "ProcessId : " << ((cn.vt == VT_NULL) ? "NULL" : "EMPTY") << endl;
                    else
                        if ((cn.vt & VT_ARRAY))
                            wcout << "ProcessId : " << "Array types not supported (yet)" << endl;
                        else
                            wcout << "ProcessId : " << cn.intVal << endl;
                }
                str->Release();

            }
        }
        VariantClear(&vtProp);

    }

    return WBEM_S_NO_ERROR;
}

HRESULT EventSinkCreationEvent::SetStatus(
    /* [in] */ LONG lFlags,
    /* [in] */ HRESULT hResult,
    /* [in] */ BSTR strParam,
    /* [in] */ IWbemClassObject __RPC_FAR* pObjParam)
{
    if (lFlags == WBEM_STATUS_COMPLETE)
    {
        printf("Call complete. hResult = 0x%X\n", hResult);
    }
    else if (lFlags == WBEM_STATUS_PROGRESS)
    {
        printf("Call in progress.\n");
    }

    return WBEM_S_NO_ERROR;
}