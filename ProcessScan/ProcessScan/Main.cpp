#include <windows.h>
#include <iostream>

/// <summary>
/// this function starts and waits for process to end
/// </summary>
/// <param name="lpApplicationPath">
/// the path of the process to run | type: LPWSTR
/// </param>
void startup(LPWSTR lpApplicationPath);

int main(void)
{
    WCHAR test[] = L"test.txt";
    LPWSTR ptr = test;
    startup(ptr);
    return 0;
}

void startup(LPWSTR lpApplicationPath)
{
    STARTUPINFO si;
    PROCESS_INFORMATION pi;

    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

    // Start the child process. 
    if (!CreateProcess(NULL,   // No module name (use command line)
        lpApplicationPath,        // Command line
        NULL,           // Process handle not inheritable
        NULL,           // Thread handle not inheritable
        FALSE,          // Set handle inheritance to FALSE
        0,              // No creation flags
        NULL,           // Use parent's environment block
        NULL,           // Use parent's starting directory 
        &si,            // Pointer to STARTUPINFO structure
        &pi)           // Pointer to PROCESS_INFORMATION structure
        )
    {
        std::cout << "CreateProcess failed: " << GetLastError() << std::endl;
        return;
    }

    // Wait until child process exits.
    WaitForSingleObject(pi.hProcess, INFINITE);

    // Close process and thread handles. 
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);

}