#include <iostream>
#include <string> 
#include <Windows.h>
#include "atlstr.h"
#include <thread> 
#include "EventSinkCreationEvent.h"
#include "EventSinkDeletionEvent.h"
#include "Helper.h"

//thread sleep duration in miliseconds
#define THREAD_SLEEP_DURATION 10000

/// <summary>
/// this function runs the process creation/deletion scan for the now running file, this function will be run as a seperate thread 
/// </summary>
/// <param name="processId">
/// processId of the running file | type: const int&
/// </param>
void runProcessScan(const int& processId);

/// <summary>
/// this function starts and waits for process to end
/// </summary>
/// <param name="lpApplicationPath">
/// the path of the process to run | type: TCHAR*
/// </param>
DWORD startup(TCHAR* lpApplicationName);

//argv contains file name
int main(int argc, char* argv[])
{
    if (argc > 1)
    {
        std::string cmd;
        cmd = STRINGS_COMMAND + std::string(argv[1]);
        std::string stringsScan = Helper::executeCommandLine(cmd.c_str());
        Helper::WriteLogToFile(stringsScan, STRINGS_FILE);

        cmd = VIRUS_TOTAL_COMMAND + std::string(argv[1]);
        std::string virusTotalScan = Helper::executeCommandLine(cmd.c_str());
        Helper::WriteLogToFile(virusTotalScan, VIRUSTOTAL_FILE);

        cmd = YARA_COMMAND + std::string(argv[1]);
        std::string yaraScan = Helper::executeCommandLine(cmd.c_str());
        Helper::WriteLogToFile(yaraScan, YARA_FILE);

        //convert argv[1] from char* to TCHAR*
        USES_CONVERSION;
        TCHAR* fileName = A2T(argv[1]);

        DWORD processId = startup(fileName);

        std::thread processScanThread (runProcessScan,processId);
        processScanThread.join();
    }
	return 0;
}

void runProcessScan(const int& processId)
{
    HRESULT hres;

    // Step 1: --------------------------------------------------
    // Initialize COM. ------------------------------------------

    hres = CoInitializeEx(0, COINIT_MULTITHREADED);
    if (FAILED(hres))
    {
        cout << "Failed to initialize COM library. Error code = 0x"
            << hex << hres << endl;
        return;                  // Program has failed.
    }

    // Step 2: --------------------------------------------------
    // Set general COM security levels --------------------------

    hres = CoInitializeSecurity(
        NULL,
        -1,                          // COM negotiates service
        NULL,                        // Authentication services
        NULL,                        // Reserved
        RPC_C_AUTHN_LEVEL_DEFAULT,   // Default authentication 
        RPC_C_IMP_LEVEL_IMPERSONATE, // Default Impersonation  
        NULL,                        // Authentication info
        EOAC_NONE,                   // Additional capabilities 
        NULL                         // Reserved
    );


    if (FAILED(hres))
    {
        cout << "Failed to initialize security. Error code = 0x"
            << hex << hres << endl;
        CoUninitialize();
        return;                      // Program has failed.
    }

    // Step 3: ---------------------------------------------------
    // Obtain the initial locator to WMI -------------------------

    IWbemLocator* pLoc = NULL;

    hres = CoCreateInstance(
        CLSID_WbemLocator,
        0,
        CLSCTX_INPROC_SERVER,
        IID_IWbemLocator, (LPVOID*)&pLoc);

    if (FAILED(hres))
    {
        cout << "Failed to create IWbemLocator object. "
            << "Err code = 0x"
            << hex << hres << endl;
        CoUninitialize();
        return;                 // Program has failed.
    }

    // Step 4: ---------------------------------------------------
    // Connect to WMI through the IWbemLocator::ConnectServer method

    IWbemServices* pSvc = NULL;

    // Connect to the local root\cimv2 namespace
    // and obtain pointer pSvc to make IWbemServices calls.
    hres = pLoc->ConnectServer(
        _bstr_t(L"ROOT\\CIMV2"),
        NULL,
        NULL,
        0,
        NULL,
        0,
        0,
        &pSvc
    );

    if (FAILED(hres))
    {
        cout << "Could not connect. Error code = 0x"
            << hex << hres << endl;
        pLoc->Release();
        CoUninitialize();
        return;                // Program has failed.
    }

    cout << "Connected to ROOT\\CIMV2 WMI namespace" << endl;


    // Step 5: --------------------------------------------------
    // Set security levels on the proxy -------------------------

    hres = CoSetProxyBlanket(
        pSvc,                        // Indicates the proxy to set
        RPC_C_AUTHN_WINNT,           // RPC_C_AUTHN_xxx 
        RPC_C_AUTHZ_NONE,            // RPC_C_AUTHZ_xxx 
        NULL,                        // Server principal name 
        RPC_C_AUTHN_LEVEL_CALL,      // RPC_C_AUTHN_LEVEL_xxx 
        RPC_C_IMP_LEVEL_IMPERSONATE, // RPC_C_IMP_LEVEL_xxx
        NULL,                        // client identity
        EOAC_NONE                    // proxy capabilities 
    );

    if (FAILED(hres))
    {
        cout << "Could not set proxy blanket. Error code = 0x"
            << hex << hres << endl;
        pSvc->Release();
        pLoc->Release();
        CoUninitialize();
        return;               // Program has failed.
    }

    // Step 6: -------------------------------------------------
    // Receive event notifications -----------------------------

    // First we set up creation event notifications
    // Use an unsecured apartment for security
    IUnsecuredApartment* pUnsecAppCreation = NULL;

    hres = CoCreateInstance(CLSID_UnsecuredApartment, NULL,
        CLSCTX_LOCAL_SERVER, IID_IUnsecuredApartment,
        (void**)&pUnsecAppCreation);

    EventSinkCreationEvent* pSinkCreation = new EventSinkCreationEvent;
    pSinkCreation->AddRef();

    IUnknown* pStubUnkCreation = NULL;
    pUnsecAppCreation->CreateObjectStub(pSinkCreation, &pStubUnkCreation);

    IWbemObjectSink* pStubSinkCreation = NULL;
    pStubUnkCreation->QueryInterface(IID_IWbemObjectSink,
        (void**)&pStubSinkCreation);

    std::string wqlCreation = "SELECT * FROM __InstanceCreationEvent WITHIN 1 WHERE TargetInstance ISA 'Win32_Process' AND TargetInstance.ParentProcessId=" + std::to_string(processId);
    
    // The ExecNotificationQueryAsync method will call
    // The EventQuery::Indicate method when an event occurs
    hres = pSvc->ExecNotificationQueryAsync(
        _bstr_t("WQL"),
        _bstr_t(wqlCreation.c_str()),
        WBEM_FLAG_SEND_STATUS,
        NULL,
        pStubSinkCreation);

    // Check for errors.
    if (FAILED(hres))
    {
        printf("ExecNotificationQueryAsync failed "
            "with = 0x%X\n", hres);
        pSvc->Release();
        pLoc->Release();
        pUnsecAppCreation->Release();
        pStubUnkCreation->Release();
        pSinkCreation->Release();
        pStubSinkCreation->Release();
        CoUninitialize();
        return;
    }
    // Now we set up process deletion notification

    IUnsecuredApartment* pUnsecAppDeletion = NULL;

    hres = CoCreateInstance(CLSID_UnsecuredApartment, NULL,
        CLSCTX_LOCAL_SERVER, IID_IUnsecuredApartment,
        (void**)&pUnsecAppDeletion);

    EventSinkDeletionEvent* pSinkDeletion = new EventSinkDeletionEvent;
    pSinkDeletion->AddRef();

    IUnknown* pStubUnkDeletion = NULL;
    pUnsecAppDeletion->CreateObjectStub(pSinkDeletion, &pStubUnkDeletion);

    IWbemObjectSink* pStubSinkDeletion = NULL;
    pStubUnkDeletion->QueryInterface(IID_IWbemObjectSink,
        (void**)&pStubSinkDeletion);

    std::string wqlDeletion = "SELECT * FROM __InstanceDeletionEvent WITHIN 1 WHERE TargetInstance ISA 'Win32_Process' AND TargetInstance.ParentProcessId=" + std::to_string(processId);

    // The ExecNotificationQueryAsync method will call
    // The EventQuery::Indicate method when an event occurs
    hres = pSvc->ExecNotificationQueryAsync(
        _bstr_t("WQL"),
        _bstr_t(wqlDeletion.c_str()),
        WBEM_FLAG_SEND_STATUS,
        NULL,
        pStubSinkDeletion);

    // Check for errors.
    if (FAILED(hres))
    {
        printf("ExecNotificationQueryAsync failed "
            "with = 0x%X\n", hres);
        pSvc->Release();
        pLoc->Release();
        pUnsecAppDeletion->Release();
        pStubUnkDeletion->Release();
        pSinkDeletion->Release();
        pStubSinkDeletion->Release();
        CoUninitialize();
        return;
    }

    // Wait for the event THREAD_SLEEP_DURATION miliseconds
    Sleep(THREAD_SLEEP_DURATION);

    hres = pSvc->CancelAsyncCall(pStubSinkCreation);
    hres = pSvc->CancelAsyncCall(pStubSinkDeletion);

    // Cleanup
    // ========

    pSvc->Release();
    pLoc->Release();
    pUnsecAppCreation->Release();
    pStubUnkCreation->Release();
    pSinkCreation->Release();
    pStubSinkCreation->Release();
    pUnsecAppDeletion->Release();
    pStubUnkDeletion->Release();
    pSinkDeletion->Release();
    pStubSinkDeletion->Release();
    CoUninitialize();

    return;
}

DWORD startup(TCHAR*  lpApplicationName)
{
    // additional information
    STARTUPINFO si;
    PROCESS_INFORMATION pi;

    // set the size of the structures
    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

    // start the program up
    CreateProcess(NULL,   // the path
        lpApplicationName,        // Command line
        NULL,           // Process handle not inheritable
        NULL,           // Thread handle not inheritable
        FALSE,          // Set handle inheritance to FALSE
        0,              // No creation flags
        NULL,           // Use parent's environment block
        NULL,           // Use parent's starting directory 
        &si,            // Pointer to STARTUPINFO structure
        &pi             // Pointer to PROCESS_INFORMATION structure
    );

    //get processId
    DWORD processId = pi.dwProcessId;

    // Close process and thread handles. 
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
    return processId;
}