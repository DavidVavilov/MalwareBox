#include "ProcessInformation.h"

ProcessInformation::ProcessInformation(TCHAR* lpApplicationName)
{
    // additional information
    STARTUPINFO si;
    PROCESS_INFORMATION pi;

    // set the size of the structures
    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

    // start the program up
    CreateProcess(NULL,   // the path
        lpApplicationName,        // Command line
        NULL,           // Process handle not inheritable
        NULL,           // Thread handle not inheritable
        FALSE,          // Set handle inheritance to FALSE
        0,              // No creation flags
        NULL,           // Use parent's environment block
        NULL,           // Use parent's starting directory 
        &si,            // Pointer to STARTUPINFO structure
        &pi             // Pointer to PROCESS_INFORMATION structure
    );

    this->_ProcessInformation = pi;
    //get processId
    DWORD processId = pi.dwProcessId;
}

ProcessInformation::~ProcessInformation()
{
    TerminateProcess(this->_ProcessInformation.hProcess, 0);
    // Close process and thread handles. 
    CloseHandle(this->_ProcessInformation.hProcess);
    CloseHandle(this->_ProcessInformation.hThread);
}

DWORD ProcessInformation::getPid()
{
    return this->_ProcessInformation.dwProcessId;
}
