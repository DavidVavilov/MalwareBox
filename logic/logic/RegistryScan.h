#pragma once
#include "IDynamicScan.h"
#include <iostream>
#include <windows.h>
#include <array>
#include <vector>
#include <fstream>
#include <regex>  
#include <tchar.h>
#include <thread>

class RegistryScan : public IDynamicScan 
{
	public:
		RegistryScan(std::string fileName);
		~RegistryScan();
		/// <summary>
		/// A method that runs the scan
		/// </summary>
		void runScan();
	private:
		std::string fileName; // File name
		HKEY dirOfKey; // Dir of key -   HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE 
		std::vector<std::thread> keyThreads; // A vector of threads for every key
		/// <summary>
		/// This function runs the strings command by creating a pipe and reading the output of stdout
		/// </summary>
		/// <param name="cmd">
		/// the command to run, in our case, running strings on a file chosen by the user | type: const char*
		/// </param>
		/// <returns>
		/// returns the output of the strings command on the file | type: std::string
		/// </returns>
		std::string executeStringsOnExecutable(const char* commandLineStringsOnExecutable);

		/// <summary>
		/// A function that gets all the registry keys from a executable file
		/// </summary>
		/// <param name="stringsResult">String stringsResult</param>
		/// <returns>A vector of the keys (Using Regex)</returns>
		std::vector<std::string> getRegistryKeysFromExecutable(std::string stringsResult);

		/// <summary>
		/// A function that checks if the key exists
		/// </summary>
		/// <param name="registryKey">RegistryKey string</param>
		/// <returns>bool</returns>
		bool checkIfRegistryKeyExists(std::string registryKey);

		/// <summary>
		/// A functions that adds a backslash 
		/// </summary>
		/// <param name="registryKey">RegistryKey string</param>
		/// <returns>string</returns>
		std::string doubleBackslash(std::string registryKey);

		/// <summary>
		/// A function that notifys when an event happens to a registry key
		/// </summary>
		/// <param name="registryKey"></param>
		void notifyRegistryKey(std::string registryKey);
};