#include <iostream>
#include <array>
#include <fstream>

#define STRINGS_COMMAND "stringsScan.exe "
#define VIRUS_TOTAL_COMMAND "node index.js "
#define YARA_COMMAND "python Yara-check.py "
#define STRINGS_FILE "StringsScanLog.txt"
#define VIRUSTOTAL_FILE "VirustTotalScanLog.txt"
#define YARA_FILE "yaraScanLog.txt"


/// <summary>
/// this function runs command line commands by creating a pipe and reading the output of stdout
/// </summary>
/// <param name="cmd">
/// the command to run, in our case, running strings on a file chosen by the user | type: const char*
/// </param>
/// <returns>
/// returns the output of the strings command on the file | type: std::string
/// </returns>
std::string exec(const char* cmd);

/// <summary>
/// writes a txt log for the string scan
/// </summary>
/// <param name="logString">
/// string containing the strings found in the file after being sorted with regex | type: const std::string& 
/// </param>
/// <param name="fileName">
/// name of the file to create | type: std::string
/// </param>
void WriteLogToFile(const std::string& logString, const std::string& fileName);

//argv contains file name
int main(int argc, char* argv[])
{
    if (argc > 1)
    {
        std::string cmd;
        cmd = STRINGS_COMMAND + std::string(argv[1]);
        std::string stringsScan = exec(cmd.c_str());
        WriteLogToFile(stringsScan, STRINGS_FILE);

        cmd = VIRUS_TOTAL_COMMAND + std::string(argv[1]);
        std::string virusTotalScan = exec(cmd.c_str());
        WriteLogToFile(virusTotalScan, VIRUSTOTAL_FILE);

        cmd = YARA_COMMAND + std::string(argv[1]);
        std::string yaraScan = exec(cmd.c_str());
        WriteLogToFile(yaraScan, YARA_FILE);
    }
	return 0;
}

std::string exec(const char* cmd) {
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(cmd, "r"), _pclose);
    if (!pipe) {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }
    return result;
}

void WriteLogToFile(const std::string& logString, const std::string& fileName)
{
    std::ofstream out(fileName);
    out << logString;
    out.close();
}