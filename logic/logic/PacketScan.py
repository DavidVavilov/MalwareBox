import os
import json
from scapy.all import *

class PacketScan(): 
   """
   A class that contains the methods and fields that do the
   packet scan on the process.
   """
   def __init__(self, processID) -> None:
      """
      Initialize the PacketScan class.
      Get a parameter of processID
      """
      self.processID = processID
      self.numOfTcpPackets = 0
      self.numOfUdpPackets = 0
      self.packets = []
         
   def __getPorts(self):
      """
      A method that runs netstat to find what ports are open for the process
      """
      stream = os.popen('netstat -ano | findstr {}'.format(self.processID))  # Runs netstat command with flags in the commandline
      output = stream.read()
      listOfIps = output.split()
      listOfIps = self.__orginizeList(listOfIps)
      ports = []
      if(listOfIps):
         for ip in listOfIps: # Gets the port from the string, Example - '10.0.0.1:2000', gets only the '2000'
            count = -1
            while(count != 0):
               if(ip[count] != ":"):
                  count = count - 1
               else:
                  ports.append(ip[(count + 1):])
                  count = 0 

         return list(dict.fromkeys(ports)) # Delete duplicate ports and return the ports
      else:
         return []

   
   def __orginizeList(self, listOfIP):
      """
      A method that orginizes the ip list from the output of netstat.
      Delets string like type of protocol, Foreign Address and PID.
      """
      listOfIP = [element for element in listOfIP if element not in {'TCP', 'UDP', str(self.processID), 'CLOSE_WAIT', 'CLOSED', 'ESTABLISHED', 'FIN_WAIT_1', 'FIN_WAIT_2', 'LISTENING', 'TIME_WAIT'}][::2]
      return listOfIP

   def __processPacket(self, packet):
      """
      A method that processs the packet.
      """
      self.packets.append(packet.summary())
      if(TCP in packet):
         self.numOfTcpPackets += 1
      elif(UDP in packet):
         self.numOfUdpPackets += 1

   def scanNetwork(self):
      """
      A method that captures packets that match the ports
      """
      ports = self.__getPorts()
      portFilter = "port"
      if(ports):
         if(len(ports) > 1): # Formats the port filter for the Scapy sniff function
            for port in ports:
               if(port != ports[-1]):
                  portFilter += " " + port + " or port"
               else:
                  portFilter += " " + port
         else:
            portFilter += " " + ports[0]

         sniff(filter = portFilter, timeout=10, prn = self.__processPacket) # Sniffs the network for packets

         logOfScan = { # Log format
            "tcp_packets" : self.numOfTcpPackets,
            "udp_packets" : self.numOfUdpPackets,
            "packets" : self.packets
         }

         with open('packet_scan_log.txt', 'w') as outfile:
            json.dump(logOfScan, outfile, indent=4) # Saves the log to a file
      else:
         print("PacketScan: No traffic from ", self.processID)


def main():
   """
   The main function
   """
   if(len(sys.argv) > 1):
      scan = PacketScan(sys.argv[1]) #sys.argv[1] argument process id
      scan.scanNetwork()
   else:
      print("Process ID is missing.")

if __name__ == "__main__":
   main()


