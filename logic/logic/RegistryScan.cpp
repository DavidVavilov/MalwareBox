#include "RegistryScan.h"

RegistryScan::RegistryScan(std::string fileName) : fileName(fileName), dirOfKey(HKEY_CURRENT_USER) // HKEY_CURRENT_USER - default dir
{
}

RegistryScan::~RegistryScan()
{
}

void RegistryScan::runScan()
{
    std::string commandLineStringsOnExecutable = "strings.exe -nobanner " + this->fileName;
    std::string stringsOutput = this->executeStringsOnExecutable(commandLineStringsOnExecutable.c_str());
    std::vector<std::string> registryKeys = this->getRegistryKeysFromExecutable(stringsOutput);
    std::cout << "Found " << registryKeys.size() << " Registry Keys:" << std::endl;
    for (int i = 0; i < registryKeys.size(); i++)
    {
        std::cout << registryKeys[i] << std::endl;
        if (this->checkIfRegistryKeyExists(registryKeys[i]))
        {
            this->keyThreads.push_back(std::thread(&RegistryScan::notifyRegistryKey, this, doubleBackslash(registryKeys[i])));
            this->keyThreads.back().detach();
        }
    }
    Sleep(THREAD_SLEEP_DURATION);


    //write log
    Logger::writeLogToFile(this->outString.str(), REGISTRY_FILE);
}

std::string RegistryScan::executeStringsOnExecutable(const char* commandLineStringsOnExecutable)
{
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(commandLineStringsOnExecutable, "r"), _pclose);
    if (!pipe)
    {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr)
    {
        result += buffer.data();
    }
    return result;
}

std::vector<std::string> RegistryScan::getRegistryKeysFromExecutable(std::string stringsResult)
{
    std::string found;
    std::smatch match;
    std::vector<std::string> matches;
    std::string::const_iterator searchStart(stringsResult.cbegin());

    while (std::regex_search(searchStart += match.position(), stringsResult.cend(), match, std::regex("(DRIVERS\\\\|HARDWARE\\\\|SAM\\\\|SECURITY\\\\|SOFTWARE\\\\|SYSTEM\\\\)([a-zA-Z \\\\*])+|(Drivers\\\\|Hardware\\\\|Sam\\\\|Security\\\\|Software\\\\|System\\\\)([a-zA-Z \\\\*])+")))
    {
        matches.push_back(match[0]);
        stringsResult = stringsResult.erase(stringsResult.find(match[0]), match[0].length() + 1);
    }
    return matches;
}

bool RegistryScan::checkIfRegistryKeyExists(std::string registryKey)
{
    HKEY key = nullptr;
    if (RegOpenKeyExA(HKEY_CURRENT_USER, doubleBackslash(registryKey).c_str(), 0, KEY_READ, &key) == ERROR_SUCCESS)
    {
        this->dirOfKey = HKEY_CURRENT_USER;
        RegCloseKey(key);
        return true;
    }
    else if (RegOpenKeyExA(HKEY_LOCAL_MACHINE, doubleBackslash(registryKey).c_str(), 0, KEY_READ, &key) == ERROR_SUCCESS)
    {
        this->dirOfKey = HKEY_LOCAL_MACHINE;
        RegCloseKey(key);
        return true;
    }
    return false;
}

std::string RegistryScan::doubleBackslash(std::string registryKey)
{
    for (int i = 0; i < registryKey.size(); i++)
    {
        if (registryKey[i] == '\\')
        {
            registryKey.insert(i, "\\");
            i++;
        }
    }
    return registryKey;
}

void RegistryScan::notifyRegistryKey(std::string registryKey)
{
    while (true) 
    {
        HANDLE hEvent;
        HKEY   hKey;
        LONG   lErrorCode;
        char lpData[1024] = { 0 };
        DWORD cType;
        DWORD buffersize = sizeof(lpData);
        DWORD  dwFilter = REG_NOTIFY_CHANGE_NAME | REG_NOTIFY_CHANGE_ATTRIBUTES | REG_NOTIFY_CHANGE_LAST_SET | REG_NOTIFY_CHANGE_SECURITY;

        lErrorCode = RegOpenKeyExA(this->dirOfKey, doubleBackslash(registryKey).c_str(), 0, KEY_NOTIFY, &hKey);
        if (lErrorCode != ERROR_SUCCESS)
        {
            std::cout << "Error1 - " << lErrorCode;
            return;
        }

        hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
        if (hEvent == NULL)
        {
            std::cout << "Error2 - " << GetLastError();
            return;
        }

        lErrorCode = RegNotifyChangeKeyValue(hKey, TRUE, dwFilter, hEvent, TRUE);
        if (lErrorCode != ERROR_SUCCESS)
        {
            std::cout << "Error3 - " << lErrorCode;
            return;
        }

        if (WaitForSingleObject(hEvent, INFINITE) == WAIT_FAILED)
        {
            std::cout << "Error4 - " << GetLastError();
            return;
        }
        else {
            // change to stringstream and log it
            std::lock_guard<std::mutex> outStringLock(this->outStringMutex);
            this->outString << "Event in - " << registryKey << std::endl;
            RegQueryValueEx(hKey, NULL, NULL, &cType, (LPBYTE)lpData, &buffersize);
            this->outString << "Registry Key Open: mem key location=" << hKey << std::endl;
        }

        // Close the key.
        lErrorCode = RegCloseKey(hKey);
        if (lErrorCode != ERROR_SUCCESS)
        {
            std::cout << "Error5 - " << GetLastError();
            return;
        }

        // Close the handle.
        if (!CloseHandle(hEvent))
        {
            std::cout << "Error6 - " << GetLastError();
            return;
        }
    }
}