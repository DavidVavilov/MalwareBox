#include "PacketScan.h"
#include <iostream>



PacketScan::PacketScan(int processId) : processId(processId)
{
    this->commandLineNetstat = "netstat -ano | find \"" + std::to_string(processId) + "\""; // Formats the command to find the open ports of the process
}

PacketScan::~PacketScan()
{
}

void PacketScan::scan()
{
    std::cout << this->findPorts();
}

std::string PacketScan::findPorts()
{
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(this->commandLineNetstat.c_str(), "r"), _pclose);
    if (!pipe)
    {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr)
    {
        result += buffer.data();
    }
    return result;
}
