import os
import json
from scapy.all import *

class PacketScan(): 
   """
   A class that contains the methods and fields that do the
   packet scan on the process.
   """
   def __init__(self, processID) -> None:
      """
      Initialize the PacketScan class.
      Get a parameter of processID
      """
      self.processID = processID
      self.numOfTcpPackets = 0
      self.numOfUdpPackets = 0
         

   def __getPorts(self):
      """
      A method that runs netstat to find what ports are open for the process
      """
      stream = os.popen('netstat -ano | findstr {}'.format(self.processID))
      output = stream.read()
      listOfIps = output.split()
      listOfIps = self.__orginizeList(listOfIps)
      ports = []
      for ip in listOfIps:
         count = -1
         while(count != 0):
            if(ip[count] != ":"):
               count = count - 1
            else:
               ports.append(ip[(count + 1):])
               count = 0 

      return list(dict.fromkeys(ports)) # Delete duplicate ports and return the ports

   
   def __orginizeList(self, listOfIP):
      """
      A method that orginizes the ip list from the output of netstat.
      Delets string like type of protocol, Foreign Address and PID.
      """
      listOfIP = [element for element in listOfIP if element not in {'TCP', 'UDP', str(self.processID), 'CLOSE_WAIT', 'CLOSED', 'ESTABLISHED', 'FIN_WAIT_1', 'FIN_WAIT_2', 'LISTENING', 'TIME_WAIT'}][::2]
      return listOfIP

   def __processPacket(self, packet):
      """
      A method that processs the packet.
      """
      print(packet.summary())
      if(TCP in packet):
         self.numOfTcpPackets += 1
      elif(UDP in packet):
         self.numOfUdpPackets += 1


   def scanNetwork(self):
      """
      A method that captures packets that match the ports
      """
      ports = self.__getPorts()

      portFilter = "port"
      if(len(ports) > 1):
         for port in ports:
            if(port != ports[-1]):
               portFilter += " " + port + " or port"
            else:
                portFilter += " " + port
         
      sniff(filter = portFilter, count = 2, prn = self.__processPacket)

      logOfScan = {
         "open_ports" : ports,
         "tcp_packets" : self.numOfTcpPackets,
         "udp_packets" : self.numOfUdpPackets
      }
      jsonLog = json.dumps(logOfScan, indent=4)
      print(jsonLog)


def main():
   """
   The main function
   """
   scan = PacketScan(17780)
   scan.scanNetwork()

if __name__ == "__main__":
   main()
